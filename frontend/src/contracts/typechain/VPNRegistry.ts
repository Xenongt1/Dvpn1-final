/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VPNRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "admin"
      | "admins"
      | "approveNode"
      | "canAccessNodes"
      | "deactivateNode"
      | "getActiveNodes"
      | "getBestNode"
      | "getNodeDetails"
      | "getTopNodes"
      | "isAdmin"
      | "registerNode"
      | "removeAdmin"
      | "updateNodeMetrics"
      | "vpnSubscriptionContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "NodeApproved"
      | "NodeDeactivated"
      | "NodeRegistered"
      | "MetricsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "approveNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccessNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBestNode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNodeMetrics",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vpnSubscriptionContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAccessNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNodeMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vpnSubscriptionContract",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [removedAdmin: AddressLike];
  export type OutputTuple = [removedAdmin: string];
  export interface OutputObject {
    removedAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeApprovedEvent {
  export type InputTuple = [nodeAddress: AddressLike];
  export type OutputTuple = [nodeAddress: string];
  export interface OutputObject {
    nodeAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeDeactivatedEvent {
  export type InputTuple = [nodeAddress: AddressLike];
  export type OutputTuple = [nodeAddress: string];
  export interface OutputObject {
    nodeAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeRegisteredEvent {
  export type InputTuple = [
    nodeAddress: AddressLike,
    ipAddress: string,
    owner: AddressLike
  ];
  export type OutputTuple = [
    nodeAddress: string,
    ipAddress: string,
    owner: string
  ];
  export interface OutputObject {
    nodeAddress: string;
    ipAddress: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetricsUpdatedEvent {
  export type InputTuple = [
    nodeAddress: AddressLike,
    latency: BigNumberish,
    bandwidth: BigNumberish,
    uptime: BigNumberish,
    reliability: BigNumberish,
    totalScore: BigNumberish
  ];
  export type OutputTuple = [
    nodeAddress: string,
    latency: bigint,
    bandwidth: bigint,
    uptime: bigint,
    reliability: bigint,
    totalScore: bigint
  ];
  export interface OutputObject {
    nodeAddress: string;
    latency: bigint;
    bandwidth: bigint;
    uptime: bigint;
    reliability: bigint;
    totalScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VPNRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VPNRegistry;
  waitForDeployment(): Promise<this>;

  interface: VPNRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  approveNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  canAccessNodes: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  deactivateNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getActiveNodes: TypedContractMethod<[], [string[]], "view">;

  getBestNode: TypedContractMethod<[], [[string, bigint]], "view">;

  getNodeDetails: TypedContractMethod<
    [nodeAddress: AddressLike],
    [[string, string, bigint, boolean, boolean, bigint]],
    "view"
  >;

  getTopNodes: TypedContractMethod<
    [count: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;

  isAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  registerNode: TypedContractMethod<
    [nodeAddress: AddressLike, ipAddress: string],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<
    [adminToRemove: AddressLike],
    [void],
    "nonpayable"
  >;

  updateNodeMetrics: TypedContractMethod<
    [
      nodeAddress: AddressLike,
      _latency: BigNumberish,
      _bandwidth: BigNumberish,
      _uptime: BigNumberish,
      _reliability: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  vpnSubscriptionContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "approveNode"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "canAccessNodes"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "deactivateNode"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBestNode"
  ): TypedContractMethod<[], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getNodeDetails"
  ): TypedContractMethod<
    [nodeAddress: AddressLike],
    [[string, string, bigint, boolean, boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTopNodes"
  ): TypedContractMethod<[count: BigNumberish], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, ipAddress: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[adminToRemove: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateNodeMetrics"
  ): TypedContractMethod<
    [
      nodeAddress: AddressLike,
      _latency: BigNumberish,
      _bandwidth: BigNumberish,
      _uptime: BigNumberish,
      _reliability: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vpnSubscriptionContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "NodeApproved"
  ): TypedContractEvent<
    NodeApprovedEvent.InputTuple,
    NodeApprovedEvent.OutputTuple,
    NodeApprovedEvent.OutputObject
  >;
  getEvent(
    key: "NodeDeactivated"
  ): TypedContractEvent<
    NodeDeactivatedEvent.InputTuple,
    NodeDeactivatedEvent.OutputTuple,
    NodeDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeRegistered"
  ): TypedContractEvent<
    NodeRegisteredEvent.InputTuple,
    NodeRegisteredEvent.OutputTuple,
    NodeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MetricsUpdated"
  ): TypedContractEvent<
    MetricsUpdatedEvent.InputTuple,
    MetricsUpdatedEvent.OutputTuple,
    MetricsUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "NodeApproved(address)": TypedContractEvent<
      NodeApprovedEvent.InputTuple,
      NodeApprovedEvent.OutputTuple,
      NodeApprovedEvent.OutputObject
    >;
    NodeApproved: TypedContractEvent<
      NodeApprovedEvent.InputTuple,
      NodeApprovedEvent.OutputTuple,
      NodeApprovedEvent.OutputObject
    >;

    "NodeDeactivated(address)": TypedContractEvent<
      NodeDeactivatedEvent.InputTuple,
      NodeDeactivatedEvent.OutputTuple,
      NodeDeactivatedEvent.OutputObject
    >;
    NodeDeactivated: TypedContractEvent<
      NodeDeactivatedEvent.InputTuple,
      NodeDeactivatedEvent.OutputTuple,
      NodeDeactivatedEvent.OutputObject
    >;

    "NodeRegistered(address,string,address)": TypedContractEvent<
      NodeRegisteredEvent.InputTuple,
      NodeRegisteredEvent.OutputTuple,
      NodeRegisteredEvent.OutputObject
    >;
    NodeRegistered: TypedContractEvent<
      NodeRegisteredEvent.InputTuple,
      NodeRegisteredEvent.OutputTuple,
      NodeRegisteredEvent.OutputObject
    >;

    "MetricsUpdated(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MetricsUpdatedEvent.InputTuple,
      MetricsUpdatedEvent.OutputTuple,
      MetricsUpdatedEvent.OutputObject
    >;
    MetricsUpdated: TypedContractEvent<
      MetricsUpdatedEvent.InputTuple,
      MetricsUpdatedEvent.OutputTuple,
      MetricsUpdatedEvent.OutputObject
    >;
  };
}
